import torchvision
import torchvision.datasets as datasets
path = ""
test_data = torchvision.datasets.ImageFolder(root='test_data_pytorch')
dataloader = torch.utils.data.DataLoader(test_data)

def plot_random_image():
        for numbers in test_data:
                # img = Image.open(numbers)
                # plt.imshow(img)
                # plt.show()
                numbers, labels = next(iter(dataloader))
                grid = torchvision.utils.make_grid(numbers,nrow=6)
                plt.imshow(grid)
                plt.show()


test_data = validation_data_dir
from pathlib import Path
from torchvision import datasets

data_path = Path(test_data)
image_path = data_path / "validation_data_pytorch"
train_dir = image_path / "train_data_pytorch"
test_dir = image_path / "test_data_pytorch"
train_data = datasets.ImageFolder(root=train_dir) 
test_data = datasets.ImageFolder(root=test_dir)

print(f"Train data:\n{train_data}\nTest data:\n{test_data}")
def plot_random_image():
        image_path_list = list(image_path.glob("*/*/*.jpg"))
        random_image_path = random.choice(image_path_list)
        image_class = random_image_path.parent.stem
        img = Image.open(random_image_path)
        img_as_array = np.asarray(img)
        plt.figure(figsize=(10,7))
        plt.imshow(img_as_array)
        plt.title(f"Image class: {image_class} | Image shape: {img_as_array.shape} -> [height, width, color_channels]")
        plt.axis(False)                

        #if classes:
            #title = f"class: {classes[targ_label]}"
            #plt.title(title)